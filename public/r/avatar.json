{
  "name": "avatar",
  "title": "Avatar",
  "description": "An enhanced avatar component with internet image support, status indicators, badges, and multiple sizes",
  "type": "registry:ui",
  "files": [
    {
      "path": "registry/components/ui/avatar.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst avatarVariants = cva(\n  \"relative flex shrink-0 overflow-hidden rounded-full border-2 border-white shadow-lg transition-all duration-200 hover:shadow-xl hover:scale-105\",\n  {\n    variants: {\n      size: {\n        xs: \"h-6 w-6\",\n        sm: \"h-8 w-8\",\n        default: \"h-10 w-10\",\n        lg: \"h-12 w-12\",\n        xl: \"h-16 w-16\",\n        \"2xl\": \"h-20 w-20\",\n      },\n      status: {\n        online: \"ring-2 ring-green-500\",\n        offline: \"ring-2 ring-gray-400\",\n        away: \"ring-2 ring-yellow-500\",\n        busy: \"ring-2 ring-red-500\",\n        none: \"\",\n      },\n    },\n    defaultVariants: {\n      size: \"default\",\n      status: \"none\",\n    },\n  }\n)\n\nexport interface AvatarProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof avatarVariants> {\n  src?: string\n  alt?: string\n  fallback?: string\n  badge?: React.ReactNode\n  badgePosition?: \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"\n  onClick?: () => void\n}\n\nconst Avatar = React.forwardRef<HTMLDivElement, AvatarProps>(\n  ({\n    className,\n    size,\n    status,\n    src,\n    alt = \"Avatar\",\n    fallback,\n    badge,\n    badgePosition = \"bottom-right\",\n    onClick,\n    children,\n    ...props\n  }, ref) => {\n    const [imageError, setImageError] = React.useState(false)\n    const [imageLoading, setImageLoading] = React.useState(!!src)\n\n    const handleImageLoad = () => {\n      setImageLoading(false)\n      setImageError(false)\n    }\n\n    const handleImageError = () => {\n      setImageLoading(false)\n      setImageError(true)\n    }\n\n    const getInitials = (name?: string) => {\n      if (!name) return \"?\"\n      return name\n        .split(\" \")\n        .map(word => word.charAt(0))\n        .join(\"\")\n        .toUpperCase()\n        .slice(0, 2)\n    }\n\n    const getBadgePosition = () => {\n      const positions = {\n        \"top-left\": \"-top-1 -left-1\",\n        \"top-right\": \"-top-1 -right-1\",\n        \"bottom-left\": \"-bottom-1 -left-1\",\n        \"bottom-right\": \"-bottom-1 -right-1\",\n      }\n      return positions[badgePosition]\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          avatarVariants({ size, status }),\n          onClick && \"cursor-pointer\",\n          className\n        )}\n        onClick={onClick}\n        {...props}\n      >\n        {/* Image */}\n        {src && !imageError && (\n          <img\n            src={src}\n            alt={alt}\n            className=\"aspect-square h-full w-full object-cover\"\n            onLoad={handleImageLoad}\n            onError={handleImageError}\n          />\n        )}\n\n        {/* Loading state */}\n        {imageLoading && (\n          <div className=\"flex h-full w-full items-center justify-center bg-muted\">\n            <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-gray-300 border-t-gray-600\" />\n          </div>\n        )}\n\n        {/* Fallback */}\n        {(!src || imageError) && !imageLoading && (\n          <div className=\"flex h-full w-full items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600 text-white font-semibold\">\n            {fallback || getInitials(alt)}\n          </div>\n        )}\n\n        {/* Badge */}\n        {badge && (\n          <div\n            className={cn(\n              \"absolute flex items-center justify-center rounded-full bg-white p-1 shadow-md\",\n              getBadgePosition()\n            )}\n          >\n            {badge}\n          </div>\n        )}\n\n        {children}\n      </div>\n    )\n  }\n)\nAvatar.displayName = \"Avatar\"\n\nexport { Avatar, avatarVariants }"
    }
  ]
}