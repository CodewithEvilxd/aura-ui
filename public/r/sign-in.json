{
  "name": "sign-in",
  "title": "Sign In",
  "description": "A Sign in component tailored to handle sign in of any style",
  "type": "registry:block",
  "files": [
    {
      "path": "registry/components/block/auth/form/signin-form.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\"\r\nimport { Button } from \"../../../ui/button\";\r\nimport { Form, FormMessage, FormControl, FormLabel, FormItem, FormField } from \"../../../ui/form\";\r\nimport { Input } from \"../../../ui/input\";\r\nimport { signinSchema } from \"../schema/signin.schema\"\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport Link from \"next/link\";\r\nimport { useForm } from \"react-hook-form\"\r\nimport { z } from \"zod\";\r\nimport { toast } from \"sonner\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"../../../ui/card\";\r\nimport { IconArrowRight, IconBrandGoogle, IconLoader2 } from \"@tabler/icons-react\";\r\nimport { FaGithub } from \"react-icons/fa6\";\r\n\r\nexport const SignIn = () => {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const form = useForm<z.infer<typeof signinSchema>>({\r\n    resolver: zodResolver(signinSchema),\r\n    defaultValues: {\r\n      email: \"\",\r\n      password: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: z.infer<typeof signinSchema>) => {\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Sign in using next auth or custom auth\r\n      const res = await fetch(\"/your/sign-in/api/url\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          email: data.email,\r\n          password: data.password\r\n        })\r\n      });\r\n      const result = await res.json();\r\n\r\n      if (result?.error) {\r\n        console.log(\"Error in signing in:\", result.error);\r\n        toast.error(\"Sign in failed\", {\r\n          description: result.error || \"Signin failed\"\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      toast.success(\"Sign in successfully\");\r\n\r\n      // re-direct the user after signin\r\n      router.replace(\"/\");\r\n    } catch (error) {\r\n      console.log(\"Error in signing in:\", error);\r\n      toast.error(\"Sign in failed\", {\r\n        description: error instanceof Error ? error.message : \"An unexpected error occurred\"\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card className=\"shadow-input md:mx-auto mx-4 max-w-full md:max-w-md md:w-full rounded-lg shadow-[0_1px_1px_rgba(0,0,0,0.05),0_4px_6px_rgba(34,42,53,0.04),0_24px_68px_rgba(47,48,55,0.05),0_2px_3px_rgba(0,0,0,0.04)] dark:shadow-none\">\r\n      <CardHeader>\r\n        <CardTitle className=\"text-3xl text-center font-bold font-sans tracking-tight\">\r\n          Vynk\r\n        </CardTitle>\r\n        <CardDescription className=\"text-muted-foreground mx-auto text-center\">\r\n          <p className=\"text-base font-bold\">Sign in to Vynk</p>\r\n          <p className=\"text-sm\">Welcome back! Please sign in to continue</p>\r\n        </CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        <Form {...form}>\r\n          <form className=\"space-y-4\" onSubmit={form.handleSubmit(onSubmit)}>\r\n            <FormField\r\n              name=\"email\"\r\n              control={form.control}\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"ml-2\">Email</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"example@gmail.com\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <FormField\r\n              name=\"password\"\r\n              control={form.control}\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel className=\"ml-2\">Password</FormLabel>\r\n                  <FormControl>\r\n                    <Input placeholder=\"••••••••\" type=\"password\" {...field} />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-full mt-6 group disabled:cursor-not-allowed\"\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <span className=\"ml-2\">Signing in...</span>\r\n                  <IconLoader2 size={18} className=\"animate-spin\" />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  Sign In <span className=\"group-hover:translate-x-1 transition-transform duration-300\"><IconArrowRight size={16} /></span>\r\n                </>\r\n              )}\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n\r\n        <div className=\"flex gap-2 items-center justify-center my-6 text-muted-foreground\">\r\n          <div className=\"h-[1px] w-4/9 rounded-full bg-gradient-to-r from-transparent to-muted-foreground/60\" />\r\n          or\r\n          <div className=\"h-[1px] w-4/9 rounded-full bg-gradient-to-r to-transparent from-muted-foreground/60\" />\r\n        </div>\r\n\r\n        <div className=\"flex gap-2\">\r\n          <Button variant={\"secondary\"}\r\n            className=\"group/btn shadow-input bg-muted text-muted-foreground relative flex w-full items-center justify-center gap-2 rounded-md px-6 py-3 font-medium dark:shadow-[0px_0px_1px_1px_#262626]\"\r\n            onClick={() => {/* Handle Google Login */ }}\r\n          >\r\n            <IconBrandGoogle className=\"h-4 w-4\" />\r\n            <span className=\"text-sm font-semibold\">\r\n              Google\r\n            </span>\r\n          </Button>\r\n          <Button variant={\"secondary\"}\r\n            className=\"group/btn shadow-input bg-muted text-muted-foreground relative flex w-full items-center justify-center gap-2 rounded-md px-6 py-3 font-medium dark:shadow-[0px_0px_1px_1px_#262626]\"\r\n            onClick={() => {/* Handle Github Login */ }}\r\n          >\r\n            <FaGithub className=\"h-4 w-4\" />\r\n            <span className=\"text-sm font-semibold\">\r\n              Github\r\n            </span>\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n      <CardFooter className=\"flex items-center justify-center gap-2 text-muted-foreground\">\r\n        <p className=\"text-sm\">\r\n          Don&apos;t have an account?\r\n        </p>\r\n        <Link href=\"/sign-up\" className=\"text-sm underline underline-offset-4 hover:text-foreground transition-colors duration-200\">Sign up</Link>\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}"
    },
    {
      "path": "registry/components/block/auth/schema/signin.schema.ts",
      "type": "registry:file",
      "target": "src/schema",
      "content": "import { z } from \"zod\";\r\n\r\nexport const signinSchema = z.object({\r\n  email: z.string().min(4, \"Unique Identifier must be at least 4 characters long\"),\r\n  password: z.string().min(8, \"Password must be at least 8 characters long\"),\r\n});"
    }
  ],
  "dependencies": [
    "@hookform/resolvers",
    "react-hook-form",
    "zod",
    "sonner",
    "@tabler/icons-react",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "form",
    "input",
    "card"
  ]
}